-------------JSON-------------

 4. Создать внешний репозиторий c названием JSON. 
    // https://github.com/katalsh/JSON.git
	
 5. Клонировать репозиторий JSON на локальный компьютер. 
    // git clone https://github.com/katalsh/JSON.git
	
 6. Внутри локального JSON создать файл “new.json”.
    //  cd /d/Ksenzov/Git/JSON
    //  touch new.json 
	
 7. Добавить файл под гит. 
    //  git add new.json
	
 8. Закоммитить файл. 
    //  git commit -m "1 commit"
	
 9. Отправить файл на внешний GitHub репозиторий. 
    //  git push
	
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, 
    будущая желаемая зарплата). Всё написать в формате JSON.
    // cat >> new.json
   {
    "FullName": "Katerina Alshevskaya",
    "Age": 35,
    "pats": 1,
    "FutureSalary": "800$"
   }
   // ctrl + C
   
 11. Отправить изменения на внешний репозиторий.
    // git commit -a
    // git push
	
 12. Создать файл preferences.json
    // touch preferences.json
	
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, 
    любимое время года, сторона которую хотели бы посетить) в формате JSON.
	//  vim preferences.json
   {
	"Любимый фильм" : "Аватар",
	"Любимый сериал" : "Доктор Хаус",
	"Любимая еда" : "Что-нибудь с сыром :)",
	"Любимое пора года" : "Осень", 
	"Страна, которую хотели бы посетить" : "Япония"
   }
    // esc :wq
	
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
    // touch skills.json
	// cat >> skills.json
  {
	"1" : "Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC", 
    "2" : "Что такое клиент-серверная архитектура",
    "3" : "HTTP Методы запросов на сервер",
    "4" : "Коды ответов HTTP сервера",
    "5" : "Структуры HTTP запросов и ответов",
    "6" : "Что такое JSON, XML. Их структура",
    "7" : "Тестирование API через Postman (JS, автотесты API)",
    "8" : "Снятие и чтение логов c внешнего сервера",
    "9" : "Снифинг http web трафика через Charles и Fiddler",
    "10" : "Dev Tools веб браузеров (Google Chrome, FireFox)",
    "11" : "VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)",
    "12" : "Мобильное тестирование",
    "13" : "Особенность iOS, Android, гайдлайны",
    "14" : "Сборка iOS приложений на XCode",
    "15" : "Сборка Android приложений на Android Studio",
    "16" : "ADB (управление андройд девайсами)",
    "17" : "Настройка прокси и vpn на iOS и Android",
    "18" : "Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android",
    "19" : "Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)",
    "20" : "Основы bash скриптинг, автоматизация рутинных задач на сервере",
    "21" : "Доступ к удалённым серверам",
    "22" : "Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join)",
    "23" : "База данных Postgres (установка, настройка и использование)",
    "24" : "Нереляционная база данных Redis (установка, настройка и использование)",
    "25" : "Нагрузочное тестирование в Jmeter",
    "26" : "Методология разработки Scrum",
    "27" : " Python. (Изучение основ. Создание клиент серверного приложения)"
  }
  
 15. Отправить сразу 2 файла на внешний репозиторий.
    // git add preferences.json skills.json
	// git commit -m "1 commit"
	// git push
	
 16. На веб интерфейсе создать файл bug_report.json.
 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 20. Синхронизировать внешний и локальный репозиторий JSON
   // git pull


-------------XML-------------

 21. Создать внешний репозиторий c названием XML.
    //  https://github.com/katalsh/XML.git

 22. Клонировать репозиторий XML на локальный компьютер.
    //  git clone https://github.com/katalsh/XML.git
	
 23. Внутри локального XML создать файл “new.xml”.
    // cd /d/Ksenzov/Git/XML
    // touch new.xml
	
 24. Добавить файл под гит.
    // git add new.xml
	
 25. Закоммитить файл.
    // git commit -m "first commit"
	
 26. Отправить файл на внешний GitHub репозиторий.
    //  git push
	
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, 
 будущая желаемая зарплата). Всё написать в формате XML.
    //  cat >> new.xml
   <?xml version="1.0" encoding="UTF-8" ?>
    <root>
      <personal_data>
        <FullName>Альшевская Екатерина Владиславовна</FullName>
        <Age>35</Age>
        <Pats>1</Pats>
        <FutureSalary>800$</FutureSalary>
      </personal_data>
    </root>

    // enter
    // ctrl+C
  
 28. Отправить изменения на внешний репозиторий.
	// git commit -am "add xml"
	// git push

 29. Создать файл preferences.xml
    // touch preferences.xml
	
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, 
 любимое время года, сторона которую хотели бы посетить) в формате XML.
    // cat >> preferences.xml
	<?xml version="1.0" encoding="UTF-8" ?>
<root>
    <preferences>
        <Favorite_movie>Avatar</Favorite_movie>
        <Favorite_TV_series>Dr.House</Favorite_TV_series>
        <Favorite_food>Something with cheese :)</Favorite_food>
        <Favorite_time_of_the_year>Autumn</Favorite_time_of_the_year> 
        <The_country_you_would_like_to_visit>Japan</The_country_you_would_like_to_visit>
	</preferences>
</root>	

    // enter 
	// ctrl+C
	
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
    // touch sklls.xml
	// cat >> sklls.xml
	<?xml version="1.0" encoding="UTF-8" ?>
 <root>
  <Knowledge>
	<topic1>Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.</topic1>
    <topic2>Что такое клиент-серверная архитектура</topic2>
    <topic3>HTTP Методы запросов на сервер</topic3>
    <topic4>Коды ответов HTTP сервера</topic4>
    <topic5>Структуры HTTP запросов и ответов</topic5>
	<topic6>Что такое JSON, XML. Их структура</topic6>
    <topic7>Тестирование API через Postman (JS, автотесты API)</topic7>
    <topic8>Снятие и чтение логов c внешнего сервера</topic8>
    <topic9>Снифинг http web трафика через Charles и Fiddler</topic9>
    <topic10>Dev Tools веб браузеров (Google Chrome, FireFox)</topic10>
    <topic11>VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)</topic11>
    <topic12>Мобильное тестирование</topic12>
    <topic13>Особенность iOS, Android, гайдлайны</topic13>
    <topic14>Сборка iOS приложений на XCode. (ознакомление)</topic14>
    <topic15>Сборка Android приложений на Android Studio</topic15>
    <topic16>ADB (управление андройд девайсами)</topic16>
    <topic17>Настройка прокси и vpn на iOS и Android</topic17>
    <topic18>Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android</topic18>
    <topic19>Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)</topic19>
    <topic20>Основы bash скриптинг, автоматизация рутинных задач на сервере</topic20>
    <topic21>Доступ к удалённым серверам</topic21>
    <topic22>Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join)</topic22>
    <topic23>База данных Postgres (установка, настройка и использование)</topic23>
    <topic24>Нереляционная база данных Redis (установка, настройка и использование)</topic24>
    <topic25>Нагрузочное тестирование в Jmeter</topic25>
    <topic26>Методология разработки Scrum</topic26>
    <topic27>Python. (Изучение основ. Создание клиент серверного приложения)</topic27>
   </Knowledge>
 </root>  
 
    // enter
	// ctrl+C
	
 32. Сделать коммит в одну строку.
    // git add .; git commit -m "commited 2 files"
	
 33. Отправить сразу 2 файла на внешний репозиторий.
    // git push
 
 34. На веб интерфейсе создать файл bug_report.xml.
 
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 38. Синхронизировать внешний и локальный репозиторий XML
    // git pull



-------------TXT-------------

 1. Создать внешний репозиторий c названием TXT.
    // https://github.com/katalsh/TXT.git
   
 2. Клонировать репозиторий TXT на локальный компьютер.
    // git clone https://github.com/katalsh/TXT.git
 
 3. Внутри локального TXT создать файл “new.txt”.
    // cd /d/Ksenzov/Git/TXT
	// touch new.txt
	
 4. Добавить файл под гит.
    // git add new.txt
	
 5. Закоммитить файл.
    // git commit -m "first commit"
	
 6. Отправить файл на внешний GitHub репозиторий.
    // git push
 
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, 
 будущая желаемая зарплата). Всё написать в формате TXT.
    // $ cat >> new.txt
  Full Name: Katerina Alshevskaya
  Age: 35
  Pats: 1
  Future Salary: 800$
    // enter
	// ctrl+C
	
 8. Отправить изменения на внешний репозиторий.
    // git commit -am "changed the file"
    // git push
	
 9. Создать файл preferences.txt
    // touch preferences.txt
 
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, 
 любимое время года, сторона которую хотели бы посетить) в формате TXT.
    // cat >> preferences.txt
  Favorite movie: Avatar
  Favorite TV series: Dr.House
  Favorite food: Somthing with cheese :)
  Favorite time of the year: Autumn
  The country you would like to visit: Japan	
	// enter
	// ctrl+C
	
 11. Создать файл sklls.txt добавить информацию о скиллах, которые будут изучены на курсе в формате TXT
    // touch sklls.txt
	// cat >> preferences.txt
	Навыки, которые мы получим на курсе Вадима Ксензова:
1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.
2. Что такое клиент-серверная архитектура.
3. HTTP Методы запросов на сервер.
4. Коды ответов HTTP сервера.
5. Структуры HTTP запросов и ответов.
6. Что такое JSON, XML. Их структура.
7. Тестирование API через Postman (JS, автотесты API).
8. Снятие и чтение логов c внешнего сервера.
9. Снифинг http web трафика через Charles и Fiddler.
10. Dev Tools веб браузеров (Google Chrome, FireFox).
11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)
12. Мобильное тестирование.
13. Особенность iOS, Android, гайдлайны.
14. Сборка iOS приложений на XCode. (ознакомление)
15. Сборка Android приложений на Android Studio.
16. ADB (управление андройд девайсами).
17. Настройка прокси и vpn на iOS и Android.
18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.
19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)
20. Основы bash скриптинг, автоматизация рутинных задач на сервере.
21. Доступ к удалённым серверам.
22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).
23. База данных Postgres (установка, настройка и использование).
24. Нереляционная база данных Redis (установка, настройка и использование).
25. Нагрузочное тестирование в Jmeter.
26. Методология разработки Scrum.
27. Python. (Изучение основ. Создание клиент серверного приложения)
    // enter
	// ctrl+C
	
 12. Сделать коммит в одну строку.
    // git add . ; git commit -m "add files"

 13. Отправить сразу 2 файла на внешний репозиторий.
    // git push
	
 14. На веб интерфейсе создать файл bug_report.txt.
 
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 
 18. Синхронизировать внешний и локальный репозиторий TXT
    // git fetch
    // git merge
